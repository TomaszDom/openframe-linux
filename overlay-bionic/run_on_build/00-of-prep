#!/bin/bash

# of-prep.sh v1.69 (14th August 2019)
#  Set up the basics.

#set -x


OPENFRAMEUSER="root"
KNSERVER="https://dl.birdslikewires.net"


##  Things to do before installing the kernel.


echo
echo "-- Permissions and Customisation"
echo
sleep 2

echo "Generating en_GB.UTF-8 locale..."
echo
locale-gen en_GB.UTF-8
mv /etc/localtime /etc/localtime.dist
ln -s /usr/share/zoneinfo/Europe/London /etc/localtime
LANG=en_GB.UTF-8
LC_MESSAGES=POSIX
echo

if [ "$OPENFRAMEUSER" != "root" ]; then

	echo "Creating '$OPENFRAMEUSER' user and setting policy..."
	# Create user with 'joggler' as the password.
	useradd -m -p sa0dkJX04f4tM -s /bin/bash $OPENFRAMEUSER
	addgroup admin
	adduser $OPENFRAMEUSER admin
	adduser $OPENFRAMEUSER audio
	adduser $OPENFRAMEUSER tty
	adduser $OPENFRAMEUSER video
	HOMEPATH="/home/$OPENFRAMEUSER"
	echo

else

	echo "root:joggler" | chpasswd
	HOMEPATH="/root"

fi

echo "Setting terminal preferences..."
# Colour terminal for all!
for f in `find / -iname *bashrc 2>/dev/null`; do
	sed -i 's/#force_color_prompt=yes/force_color_prompt=yes/' $f
done
echo

## Plough on. I sometimes use this on a network where pings are blocked. Not by me, I might add.
# echo "Waiting for network..."
# until ping -c 3 1.1.1.1 &>/dev/null
# do
# 	sleep 1
# done
# echo

echo "Running up apt..."
echo
sleep 4

## Update and remove some stuff.
apt-get update
DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade

## System Goodies

# nfs-common 		- DO NOT add nfs-common here. It stuffs up rebooting and has to be installed once the system is live.
APT_SYSTEM="acpi bash-completion bc bluez curl dosfstools htop i2c-tools libbsd0 libdaemon0 libedit2 libio-socket-ssl-perl libnet-ssleay-perl libpango1.0-0 libwrap0 libx11-6 libx11-data libxau6 libxcb1 libxdmcp6 libxext6 libxmuu1 nano net-tools ntpdate patch pciutils psmisc rsync sudo tcpd usbutils usb-modeswitch usb-modeswitch-data unclutter unzip usbmount uuid wget wpasupplicant wireless-tools x11-xserver-utils xauth xinput zlibc"
APT_AUDIO="alsa-base alsa-utils libmad0 libvorbisidec1 libsoxr0 mpg123"
APT_SSH="ssh openssh-server"

apt-get install -y $APT_SYSTEM $APT_AUDIO $APT_SSH

echo
sleep 2

# We use this for simple command line control of yaml files, eg. the netplan config file.
echo "Installing yq..."
curl -o /usr/local/bin/yq https://dl.birdslikewires.net/openframe/deps/yq_linux_386
echo

echo "Clarify user permissions..."
chown root:root /home
[[ "$OPENFRAMEUSER" != "root" ]] && chown -R $OPENFRAMEUSER:$OPENFRAMEUSER $HOMEPATH $HOMEPATH/.*
chmod +s /bin/ping /bin/ping6 /bin/su /usr/bin/sudo /usr/sbin/ntpdate
chown root:root /usr/local/bin/*
chown root:root /usr/local/sbin/*
chmod 755 /usr/local/bin/*
chmod 755 /usr/local/sbin/*
echo

echo "Enable custom systemd services..."
chmod +x /usr/local/sbin/of-*
chmod +x /usr/sbin/*

for f in `ls -1 /lib/systemd/system | grep 'of-' | grep '.service'`; do
  SERVICE=`echo $f | awk -F\.service {'print $1'}`
  /bin/systemctl enable $SERVICE
  echo "Enabled $SERVICE"
done
echo

echo "Enable password authentication for root user over SSH..."
[[ "$OPENFRAMEUSER" == "root" ]] && echo "PermitRootLogin yes" >> /etc/ssh/sshd_config
echo

echo "Configure usbmount..."
cp /temp/usbmount/usbmount.conf /etc/usbmount/usbmount.conf
cp /temp/usbmount/mount.d/* /etc/usbmount/mount.d/
cp /temp/usbmount/umount.d/* /etc/usbmount/umount.d/
chown root:root /etc/usbmount/mount.d/* /etc/usbmount/umount.d/*
chmod 755 /etc/usbmount/mount.d/* /etc/usbmount/umount.d/*
echo

## This one is no longer needed - so long as 'quiet' is used in the boot paramters, initramfs now respects it.
#echo "Silence initramfs..."
#sed -i 's/ || echo "Loading, please wait..."//g' /usr/share/initramfs-tools/init
#echo



## Install the kernel.


echo "-- Kernel Installation"
echo
sleep 2

KERNVER=`ls /mnt/ | grep linux-image | awk -F\- '{print $3}' | awk -F\_ '{print $1}'`
KERNMAJVER=`echo $KERNVER | awk -F\. {'print $1'}`
KERNMIDVER=`echo $KERNVER | awk -F\. {'print $2'}`
KERNMINVER=`echo $KERNVER | awk -F\. {'print $3'}`
source /etc/lsb-release

echo "Installing kernel $KERNVER into ${DISTRIB_CODENAME^} chroot..."
dpkg -i /mnt/linux-image*.deb
echo


KERNELURL="$KNSERVER/openframe/kernel/${DISTRIB_ID,,}/${DISTRIB_CODENAME,,}/$KERNMAJVER.$KERNMIDVER/$KERNVER"
echo "Checking $KERNELURL for companion modules..."
if curl -f "$KERNELURL/modules-$KERNVER.tgz" >/dev/null 2>&1; then
	echo
	echo "Found additional modules on $KNSERVER for $KERNVER. Downloading and installing."
	echo
	curl -o /modules-$KERNVER.tgz "$KERNELURL/modules-$KERNVER.tgz"
	if [ -f /modules-$KERNVER.tgz ]; then
		tar zxvf /modules-$KERNVER.tgz -C /
		rm /modules-$KERNVER.tgz
	fi
fi

depmod -a $KERNVER
echo

if [ `grep -c initrd /boot/grub.cfg` -gt 0 ]; then
	echo -n "Making initrd..."
	#sed -i 's/MODULES\=most/MODULES\=dep/g' /etc/initramfs-tools/initramfs.conf
	#sed -i 's/COMPRESS\=gzip/COMPRESS\=xz/g' /etc/initramfs-tools/initramfs.conf
	mkinitramfs -o /boot/initrd.img-$KERNVER $KERNVER
	sleep 2
	echo " done!"
fi

## Wind down.


echo "-- Wind Down"
echo
sleep 2

apt-get -y autoremove
apt-get clean
echo

echo "Cleaning..."
rm -rf /etc/apparmor*
rm -rf /temp
rm -rf /var/cache/apt/*.bin
rm -rf /var/lib/apt/lists
mkdir -p /var/lib/apt/lists/partial
echo

echo "Remove SSH host keys..."
rm -v /etc/ssh/ssh_host_*
echo

echo "Prep complete."
exit 0
